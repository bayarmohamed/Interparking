@model Interparking.WeppApp.Models.Routes.RouteViewModel

@*@{
    Layout = null;
}*@

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    @using (Html.BeginForm("CreateRoute", "Route", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>RouteViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*<div class="form-group">
            @Html.LabelFor(model => model.IdClient, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.IdClient, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IdClient, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.Label("From", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.Departure, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DropDownListFor(model => model.Departure, Model.Parkings, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Departure, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("To", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.Destination, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DropDownListFor(model => model.Destination, Model.Parkings, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Destination, "", new { @class = "text-danger" })
            </div>
        </div>



        @Html.HiddenFor(model => model.IdClient, new { htmlAttributes = new { @class = "form-control" } })
        @Html.HiddenFor(model => model.LongDeparture, new { htmlAttributes = new { @class = "form-control" } })
        @Html.HiddenFor(model => model.LongDestination, new { htmlAttributes = new { @class = "form-control" } })
        @Html.HiddenFor(model => model.LatDeparture, new { htmlAttributes = new { @class = "form-control" } })
        @Html.HiddenFor(model => model.LatDestination, new { htmlAttributes = new { @class = "form-control" } })

        

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Get Route" onclick="GetRoute()" class="btn btn-default" />
                <input type="submit" value="Save Route" class="btn btn-default" />
            </div>
        </div>

    </div>
    }



    <div>
        @*<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>*@
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBv2qVXX5rgtBqbwO63vU88b6W_FlHrES8&libraries=&v=weekly"
                defer></script>
        <style type="text/css">
            /* Always set the map height explicitly to define the size of the div
                    * element that contains the map. */
            #map {
                height: 400px;
                width: 1000px;
            }

            /* Optional: Makes the sample page fill the window. */
            html,
            body {
                height: 100%;
                margin: 0;
                padding: 0;
            }
        </style>
        <script>




            function initMap() {

                var source, destination;
                var directionsDisplay;
                var directionsService = new google.maps.DirectionsService();
                var distance = 0;
                var map;

                map = new google.maps.Map(document.getElementById("map"), {
                    center: {
                        lat: -34.397,
                        lng: 150.644
                    },
                    zoom: 8
                });



                google.maps.event.addDomListener(window, 'load', function () {
                    new google.maps.places.SearchBox(document.getElementById('Departure'));
                    new google.maps.places.SearchBox(document.getElementById('Destination'));

                });
                directionsDisplay = new google.maps.DirectionsRenderer({ 'draggable': true });
                directionsDisplay.setMap(map);

                source = document.getElementById("Departure").value;
                destination = document.getElementById("Destination").value;

                var request = {
                    origin: source,
                    destination: destination,
                    travelMode: google.maps.TravelMode.DRIVING
                };

                directionsService.route(request, function (response, status) {
                    if (status == google.maps.DirectionsStatus.OK) {
                        directionsDisplay.setDirections(response);
                    }
                });

                //*********DISTANCE AND DURATION**********************//
                var service = new google.maps.DistanceMatrixService();
                service.getDistanceMatrix({
                    origins: [source],
                    destinations: [destination],
                    travelMode: google.maps.TravelMode.DRIVING,
                    unitSystem: google.maps.UnitSystem.METRIC,
                    avoidHighways: false,
                    avoidTolls: false
                }, function (response, status) {

                    if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {
                        distance = response.rows[0].elements[0].distance.text;
                        var duration = response.rows[0].elements[0].duration.value;
                        var dvDistance = document.getElementById("dvDistance");
                        duration = parseFloat(duration / 60).toFixed(2);
                        dvDistance.innerHTML = "";
                        dvDistance.innerHTML += "Distance: " + distance + "<br />";
                        dvDistance.innerHTML += "Time:" + duration + " min";

                        document.getElementById("LongDeparture").value = "100";
                        document.getElementById("LongDestination").value = "100";
                        document.getElementById("LatDeparture").value = "100";
                        document.getElementById("LatDestination").value = "100";
                        

                    } else {
                       // alert("Unable to find the distance via road.");
                        distance = 0;
                        document.getElementById("LongDeparture").value = "0";
                        document.getElementById("LongDestination").value = "0";
                        document.getElementById("LatDeparture").value = "0";
                        document.getElementById("LatDestination").value = "0";
                    }
                });
                return distance;
            }
            function GetRoute() {

               alert ( 'Distance : ' + initMap());
                }
            //}
        </script>
    </div>

   
    <div id="map"></div>





</body>
</html>
